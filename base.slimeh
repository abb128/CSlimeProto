/*        Types         */

typedef uint16_t SlimePacketNumber;

/*        Enums         */

/// Default handle values for default commands. These are usable by default
/// and do not require a command descriptor to be sent first. It is forbidden
/// to try and override these handles.
///@Enum8
typedef enum SlimeReservedHandle {
    SLIME_HANDLE_HANDSHAKE_INIT = 1,
    SLIME_HANDLE_HANDSHAKE_INIT_R = 2,
    SLIME_HANDLE_HANDSHAKE = 3,
    SLIME_HANDLE_HANDSHAKE_R = 4,
    SLIME_HANDLE_CMD_DESC = 5,
    SLIME_HANDLE_CMD_DESC_R = 6,
    SLIME_HANDLE_PACKET_ACK = 7,
    SLIME_HANDLE_REPORT_ERROR = 8,
    SLIME_HANDLE_FINALIZE_DESCRIPTORS = 9,
    SLIME_HANDLE_RESET_REQUEST = 10,
    // Reserved until =31
} SlimeReservedHandle;


///@Enum32
typedef enum SlimeReliabilityBits {
    /// Acknowledgements should be sent in response to commands that
    /// have `SLIME_COMMAND_ACKNOWLEDGE` flag enabled.
    SLIME_RELIABILITY_ACK = 1,

    /// Ordering of packets should be read and checked in commands that
    /// have `SLIME_COMMAND_ORDERED` flag enabled. (TODO)
    SLIME_RELIABILITY_ORDERING = 2
} SlimeReliabilityBits;


///@Enum32
typedef enum SlimeCommandFlagBits {
    // The client may send this command to the server
    SLIME_COMMAND_CLIENT_SENDS = 1,

    // The server may send this command to the client
    SLIME_COMMAND_SERVER_SENDS = 2,

    // If `SLIME_RELIABILITY_ORDERING` is active, the packet will include
    // a number, and out-of-order packets should be ignored.
    SLIME_COMMAND_ORDERED = 4,

    // If `SLIME_RELIABILITY_ACK` is active, the packet will include a
    // number, and the other end must send a command acknowledging
    // receipt, otherwise the packet shall be resent.
    SLIME_COMMAND_ACKNOWLEDGE = 8
} SlimeCommandFlagBits;


///@Enum32
typedef enum SlimeCommandDescriptorStatus {
    /// Indicates that an error has occurred (TODO)
    SLIME_COMMAND_ACK_ERROR = 0,

    /// Indicates that the command has been understood and may be used
    /// from now on
    SLIME_COMMAND_ACK_OK = 1,

    /// Indicates that the descriptor was received, but the server doesn't
    /// support this command and it should not be used. The associated
    /// handle may be re-used to send a different descriptor.
    SLIME_COMMAND_ACK_UNKNOWN = 2
} SlimeCommandDescriptorStatus;

///@Enum32
typedef enum SlimeResetRequestType {
    /// Requests the client to do the handshake procedure all over again.
    SLIME_RESET_REQUEST_RETRY_HANDSHAKE = 1,
    
    /// Should completely reboot the tracker and reattempt connection once it
    /// has booted. If rebooting is unsupported, same behavior as
    /// `SLIME_RESET_REQUEST_RETRY_HANDSHAKE`
    SLIME_RESET_REQUEST_REBOOT = 2,
} SlimeResetRequestType;


/*      Structs       */

/// This is the first packet sent by the client. This is intended for the
/// server to detect endianness mode and ensure it is decoding packets
/// correctly.
///@DefaultCommand
///.handle = SLIME_HANDLE_HANDSHAKE_INIT
///.flags = SLIME_COMMAND_CLIENT_SENDS
typedef struct SLIME_PACKED SlimeHandshakeInit {
    /// Must be set to SLIME_HANDSHAKE_INIT_UUID
    SlimeUUID magic_uuid;

    /// Must be set to SLIME_HANDSHAKE_INIT_INT
    uint32_t magic_int;

    /// Must be set to SLIME_HANDSHAKE_INIT_SHORT
    uint16_t magic_short;

    /// Must be set to SLIME_HANDSHAKE_INIT_BYTE
    uint8_t  magic_byte;
} SlimeHandshakeInit;

/// Value of SlimeHandshakeInit.magic_int
const uint32_t SLIME_HANDSHAKE_INIT_INT   = 3265741128;
/// Value of SlimeHandshakeInit.magic_short
const uint16_t SLIME_HANDSHAKE_INIT_SHORT = 11359;
/// Value of SlimeHandshakeInit.magic_byte
const uint8_t  SLIME_HANDSHAKE_INIT_BYTE  = 181;
/// Value of SlimeHandshakeInit.magic_uuid (92b40922-445e-4484-bc3d-f0c696a3080c)
const SlimeUUID SLIME_HANDSHAKE_INIT_UUID = SlimeUUID {
    0x92, 0xb4, 0x09, 0x22,
    0x44, 0x5e,
    0x44, 0x84,
    0xbc, 0x3d,
    0xf0, 0xc6, 0x96, 0xa3, 0x08, 0x0c
};


/// Sent by the server in response to `SlimeHandshakeInit`
///@DefaultCommand
///.handle = SLIME_HANDLE_HANDSHAKE_INIT_R
///.flags = SLIME_COMMAND_SERVER_SENDS
typedef struct SLIME_PACKED SlimeHandshakeInitResponse {
    /// Must be set to SLIME_HANDSHAKE_RESPONSE_MAGIC
    uint32_t magic;
    
    // (TODO should we include more magics?)
} SlimeHandshakeInitResponse;

/// Value of SlimeHandshakeInitResponse.magic
const uint32_t SLIME_HANDSHAKE_RESPONSE_MAGIC = 1029226168;

/// This is the second packet sent by the client. If this packet is received
/// in the middle of a connection, the server should clear its internal
/// connection data (such as the handleâ†’command map) and start all over again.
///@DefaultCommand
///.handle = SLIME_HANDLE_HANDSHAKE
///.flags = SLIME_COMMAND_CLIENT_SENDS
typedef struct SLIME_PACKED SlimeHandshake {
    // (TODO This packet is kinda big)

    /// Should be set to 1.
    uint32_t protocol_version;
    
    /// The client's installed firmware type and version.
    SlimeUUID firmware;

    /// Identifier for the hardware kind and revision.
    SlimeUUID hardware;

    /// Random unique identifier, different per each tracker.
    SlimeUUID hw_uid;

    /// Level of reliability the protocol should ensure.
    /// For example, TCP communication is reliable enough to set this to 0,
    /// while UDP communication should have all bits enabled.
    SlimeReliabilityBits reliability;
} SlimeHandshake;


/// Sent by the server in response to the client handshake
///@DefaultCommand
///.handle = SLIME_HANDLE_HANDSHAKE_R
///.flags = SLIME_COMMAND_SERVER_SENDS
typedef struct SLIME_PACKED SlimeHandshakeResponse {
    // (TODO)
} SlimeHandshakeResponse;


/// Command descriptors are sent by the tracker following the handshake.
///@DefaultCommand
///.handle = SLIME_HANDLE_CMD_DESC
///.flags = SLIME_COMMAND_CLIENT_SENDS
typedef struct SLIME_PACKED SlimeCommandDescriptor {
    /// An identifier for the command, used by the server to look up and find
    /// the correct handler for this command type. This is similar to the idea
    /// of a packet type in the old protocol, except there are now 128-bits
    /// and a simple process to generate new ones.
    SlimeUUID uuid;

    /// Responsibilities associated with the command.
    SlimeCommandFlagBits flags;

    /// The handle value that is being assigned, and will be used from now
    /// on to represent this command by either side.
    SlimeHandle assigned_handle;
} SlimeCommandDescriptor;


/// Upon receiving such a descriptor, the server must respond acknowledging
/// that the descriptor was successfully received.
///@DefaultCommand
///.handle = SLIME_HANDLE_CMD_DESC_R
///.flags = SLIME_COMMAND_SERVER_SENDS
typedef struct SLIME_PACKED SlimeCommandDescriptorResponse {
    /// The handle value which the client sent
    SlimeHandle handle;

    /// Status of the descriptor
    SlimeCommandDescriptorStatus status;
} SlimeCommandDescriptorResponse;


///@DefaultCommand
///.handle = SLIME_HANDLE_PACKET_ACK
///.flags = SLIME_COMMAND_CLIENT_SENDS | SLIME_COMMAND_SERVER_SENDS
typedef struct SLIME_PACKED SlimePacketAcknowledgment {
    SlimePacketNumber packet_number;
} SlimePacketAcknowledgment;

///@DefaultCommand
///.handle = SLIME_HANDLE_RESET_REQUEST
///.flags = SLIME_COMMAND_SERVER_SENDS
typedef struct SLIME_PACKED SlimeResetRequest {
    SlimeResetRequestType type;
} SlimeResetRequest;


/// This command declares that no more command descriptors will be sent,
/// and that it's safe to make the handle->command mapping immutable
/// (unless a handshake packet is resent) (TODO)
///@DefaultCommand
///.handle = SLIME_HANDLE_FINALIZE_DESCRIPTORS
///.flags = SLIME_COMMAND_CLIENT_SENDS
typedef struct SLIME_PACKED SlimeDescriptorFinalize {

} SlimeDescriptorFinalize;


/// If an error has occurred, the tracker may report it to the server using
/// this command. Depending on the error type, the server may wish to display
/// the error to the user.
///@DefaultCommand
///.handle = SLIME_HANDLE_REPORT_ERROR
///.flags = SLIME_COMMAND_CLIENT_SENDS
typedef struct SLIME_PACKED SlimeReportError {
    /// An identifier for the error
    SlimeUUID error_type;
    
    // /// Additional data regarding the error (TODO is this needed)
    // char data[16]; // (TODO unsupported by slime-codegen)
} SlimeReportError;

/// `SlimeHandshakeInitResponse` contained invalid magic values.
const SlimeUUID SLIME_ERROR_INVALID_INIT_RESPONSE = SlimeUUID {
    0x10, 0x00, 0x00, 0x01,
    0x44, 0x5e, 0x44, 0x84, 0xbc, 0x3d, 0xf0, 0xc6, 0x96, 0xa3, 0x08, 0x0c
};

/// A command was received with an invalid handle.
const SlimeUUID SLIME_ERROR_INVALID_HANDLE = SlimeUUID {
    0x10, 0x00, 0x00, 0x02,
    0x44, 0x5e, 0x44, 0x84, 0xbc, 0x3d, 0xf0, 0xc6, 0x96, 0xa3, 0x08, 0x0c
};
